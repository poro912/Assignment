개요


IPC(Inter Process Communication)
프로세스 사이에서 통신을 가능하게 하는 메커니즘
파일, mmap, 세마포어, 공유메모리, 메시지 큐, 파이프, 소켓, 시그널 등의 모든 통신 기법이 이에 해당한다

익명 파이프


mmap
memory mapped I/O
장치나 파일을 메모리와 대응시키는 기법
권한속성 rwx(read, write, execute)를 갖는다.
공유 방식에 따라 shared, priate로 나뉜다.
파일 기술자를 포인터 변수에 대응시키는 방법으로 구현함

복수의 프로세스가 같은 파일에 대해 mmap을 호출하면 가상 주소는 달라도 물리적인 주소는 동일해 공유의 효과를 갖는다.

장점
블록 장치에 접근할 때 시스템 호출 없이 실행돼 가볍다.
특정 함수 없이 메모리 맵의 특정 주소로 이동할 수 있다.
일반 파일보다 더 오랜 시간 더티 페이지로 유지될 가능성이 커서 I/O 처리가 빈번한 파일의 경우 메모리맵 사용이 유리하다.

더티페이지 : 읽기 쓰기 작업이 일어난 경우 pagecache에 저장하는데 이 때 한번에 하드에 저장하는 것이 아닌 메모리에 유지하다 일정 조건에 만족하면 파일에 쓰게된다, 메모리에 유지된 상태에서 저장장치에 저장된 내용과 다른 부분을 더티페이지라 부른다.

shared mmap	: 쓰기가 발생했을 때 mmap을 보고 있는 모든 프로세스가 변경된 내용을 같이 보는 mmap
private mmap	: (리눅스 전용)쓰기가 발생하기 전까지는 공유되다 쓰기가 발생하면 공유가 끊어지고 COW가 발생하는 형식의 mmap, 쓰기를 실행한 프로세스의 전용페이지로 전환된다.

스왑인		: 페이지를 물리 메모리에 보내는 경우
스왑아웃	: 페이지를 물리 메모리에서 가져오는 경우
file-backed 메모리	: 특정 경로에 이미 원본이 존재하는 경우


특징
대응된 메모리 맵은 포인터로 접근하므로 사용이 쉽다.
시스템 호출을 통하지 않고도 파일의 내용에 접근할 수 있다. 
메모리와 파일 사이의 동기화는 운영체제가 담당하므로 편리하다.
공유된 mmap을 사용할 때는 크리티컬 섹션 보호에 신경 써야 한다.
대응된 메모리 맵의 크기를 넘어서는 경우 파일에 영향을 주지 않는다.

함수
mmap		메모리를 파일(장치)에 대응시킨다.
munmap	mmap을 해제한다.
msync		메모리와 파일을 동기화한다.
mprotect	접근 권한을 변경한다.
mremap	mmap을 재조정한다.

대상 파일은 대응시킬 메모리의 크기보다 커야한다.
만약 작은 경우 ftruncate 

posix_madvise madvise

Huge Page

SysV and POSIX IPC



공유메모리 shared memory
함수 콜 없이 주소번지에 직접 접근한다.
입출력 시 포인터 변수에 직접 접근하기 때문에 가장 빠른 성능을 보여준다.
배타적 접근을 보장해야하며 전적으로 프로그래머가 담당한다.
배타적 접근을 lock 매커니즘이라 하며 이에는 세마포어, 뮤텍스, rwlock, spinlock 등이 있다.

구현 방식에 따라 SysV, POSIX 형식으로 나뉜다.



세마포어



메시지큐




mmap(memory mapped I/O)
장치나 파일을 메모리와 대응시키는 기법  
복수의 프로세스가 같은 파일에 대해 mmap을 호출하면 가상주소는 달라도 물리적 주소는 동일하여 공유 효과를 가진다.  
rwx (read, write, execute) 프로텍션(권한)이 존재한다.  
공유 방식에 따라 공유 메모리맵, 사설 메모리맵으로 나뉜다.  
공유된 mmap을 사용할 때는 크리티컬 섹션 보호에 신경 써야 한다.  
메모리 해제 전 msync로 동기화를 마치고 해제하는 것이 좋다.  
대상 파일은 대응시킬 메모리의 크기보다 커야하며 만약 작은경우 ftruncate 함수를 사용해 늘린다.  
파일의 크기는 MMAP_SIZE 보다 커야한다.  





